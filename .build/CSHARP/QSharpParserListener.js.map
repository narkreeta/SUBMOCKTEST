{
  "version": 3,
  "sources": ["../../CSHARP/QSharpParserListener.ts"],
  "sourcesContent": ["// Generated from ./CSHARP/QSharpParser.g4 by ANTLR 4.9.0-SNAPSHOT\n\n\nimport { ParseTreeListener } from \"antlr4ts/tree/ParseTreeListener\";\n\nimport { InterpStringEscapeContentContext } from \"./QSharpParser\";\nimport { InterpExpressionContentContext } from \"./QSharpParser\";\nimport { InterpTextContentContext } from \"./QSharpParser\";\nimport { AdjointCharacteristicsContext } from \"./QSharpParser\";\nimport { ControlledCharacteristicsContext } from \"./QSharpParser\";\nimport { CharacteristicGroupContext } from \"./QSharpParser\";\nimport { IntersectCharacteristicsContext } from \"./QSharpParser\";\nimport { UnionCharacteristicsContext } from \"./QSharpParser\";\nimport { MissingTypeContext } from \"./QSharpParser\";\nimport { TupleTypeContext } from \"./QSharpParser\";\nimport { TypeParameterContext } from \"./QSharpParser\";\nimport { ArrayTypeContext } from \"./QSharpParser\";\nimport { CallableTypeContext } from \"./QSharpParser\";\nimport { BigIntTypeContext } from \"./QSharpParser\";\nimport { BoolTypeContext } from \"./QSharpParser\";\nimport { DoubleTypeContext } from \"./QSharpParser\";\nimport { IntTypeContext } from \"./QSharpParser\";\nimport { PauliTypeContext } from \"./QSharpParser\";\nimport { QubitTypeContext } from \"./QSharpParser\";\nimport { RangeTypeContext } from \"./QSharpParser\";\nimport { ResultTypeContext } from \"./QSharpParser\";\nimport { StringTypeContext } from \"./QSharpParser\";\nimport { UnitTypeContext } from \"./QSharpParser\";\nimport { UserDefinedTypeContext } from \"./QSharpParser\";\nimport { DiscardSymbolContext } from \"./QSharpParser\";\nimport { SymbolNameContext } from \"./QSharpParser\";\nimport { SymbolTupleContext } from \"./QSharpParser\";\nimport { NamedTypeItemContext } from \"./QSharpParser\";\nimport { UnderlyingTypeItemContext } from \"./QSharpParser\";\nimport { NamedParameterContext } from \"./QSharpParser\";\nimport { TupledParameterContext } from \"./QSharpParser\";\nimport { ExpressionStatementContext } from \"./QSharpParser\";\nimport { ReturnStatementContext } from \"./QSharpParser\";\nimport { FailStatementContext } from \"./QSharpParser\";\nimport { LetStatementContext } from \"./QSharpParser\";\nimport { MutableStatementContext } from \"./QSharpParser\";\nimport { SetStatementContext } from \"./QSharpParser\";\nimport { UpdateStatementContext } from \"./QSharpParser\";\nimport { UpdateWithStatementContext } from \"./QSharpParser\";\nimport { IfStatementContext } from \"./QSharpParser\";\nimport { ElifStatementContext } from \"./QSharpParser\";\nimport { ElseStatementContext } from \"./QSharpParser\";\nimport { ForStatementContext } from \"./QSharpParser\";\nimport { WhileStatementContext } from \"./QSharpParser\";\nimport { RepeatStatementContext } from \"./QSharpParser\";\nimport { UntilStatementContext } from \"./QSharpParser\";\nimport { WithinStatementContext } from \"./QSharpParser\";\nimport { ApplyStatementContext } from \"./QSharpParser\";\nimport { QubitDeclarationContext } from \"./QSharpParser\";\nimport { CallableStatementsContext } from \"./QSharpParser\";\nimport { CallableSpecializationsContext } from \"./QSharpParser\";\nimport { MissingExpressionContext } from \"./QSharpParser\";\nimport { IdentifierExpressionContext } from \"./QSharpParser\";\nimport { IntegerExpressionContext } from \"./QSharpParser\";\nimport { BigIntegerExpressionContext } from \"./QSharpParser\";\nimport { DoubleExpressionContext } from \"./QSharpParser\";\nimport { StringExpressionContext } from \"./QSharpParser\";\nimport { InterpStringExpressionContext } from \"./QSharpParser\";\nimport { BoolExpressionContext } from \"./QSharpParser\";\nimport { ResultExpressionContext } from \"./QSharpParser\";\nimport { PauliExpressionContext } from \"./QSharpParser\";\nimport { TupleExpressionContext } from \"./QSharpParser\";\nimport { ArrayExpressionContext } from \"./QSharpParser\";\nimport { SizedArrayExpressionContext } from \"./QSharpParser\";\nimport { NewArrayExpressionContext } from \"./QSharpParser\";\nimport { NamedItemAccessExpressionContext } from \"./QSharpParser\";\nimport { ArrayAccessExpressionContext } from \"./QSharpParser\";\nimport { UnwrapExpressionContext } from \"./QSharpParser\";\nimport { ControlledExpressionContext } from \"./QSharpParser\";\nimport { AdjointExpressionContext } from \"./QSharpParser\";\nimport { CallExpressionContext } from \"./QSharpParser\";\nimport { PrefixOpExpressionContext } from \"./QSharpParser\";\nimport { ExponentExpressionContext } from \"./QSharpParser\";\nimport { MultiplyExpressionContext } from \"./QSharpParser\";\nimport { AddExpressionContext } from \"./QSharpParser\";\nimport { ShiftExpressionContext } from \"./QSharpParser\";\nimport { CompareExpressionContext } from \"./QSharpParser\";\nimport { EqualsExpressionContext } from \"./QSharpParser\";\nimport { BitwiseAndExpressionContext } from \"./QSharpParser\";\nimport { BitwiseXorExpressionContext } from \"./QSharpParser\";\nimport { BitwiseOrExpressionContext } from \"./QSharpParser\";\nimport { AndExpressionContext } from \"./QSharpParser\";\nimport { OrExpressionContext } from \"./QSharpParser\";\nimport { ConditionalExpressionContext } from \"./QSharpParser\";\nimport { RangeExpressionContext } from \"./QSharpParser\";\nimport { RightOpenRangeExpressionContext } from \"./QSharpParser\";\nimport { LeftOpenRangeExpressionContext } from \"./QSharpParser\";\nimport { OpenRangeExpressionContext } from \"./QSharpParser\";\nimport { UpdateExpressionContext } from \"./QSharpParser\";\nimport { LambdaExpressionContext } from \"./QSharpParser\";\nimport { OpenElementContext } from \"./QSharpParser\";\nimport { TypeElementContext } from \"./QSharpParser\";\nimport { CallableElementContext } from \"./QSharpParser\";\nimport { AutoGeneratorContext } from \"./QSharpParser\";\nimport { SelfGeneratorContext } from \"./QSharpParser\";\nimport { InvertGeneratorContext } from \"./QSharpParser\";\nimport { DistributeGeneratorContext } from \"./QSharpParser\";\nimport { IntrinsicGeneratorContext } from \"./QSharpParser\";\nimport { ProvidedGeneratorContext } from \"./QSharpParser\";\nimport { TupleUnderlyingTypeContext } from \"./QSharpParser\";\nimport { UnnamedTypeItemContext } from \"./QSharpParser\";\nimport { SingleQubitContext } from \"./QSharpParser\";\nimport { QubitArrayContext } from \"./QSharpParser\";\nimport { QubitTupleContext } from \"./QSharpParser\";\nimport { DocumentContext } from \"./QSharpParser\";\nimport { NamespaceContext } from \"./QSharpParser\";\nimport { QualifiedNameContext } from \"./QSharpParser\";\nimport { NamespaceElementContext } from \"./QSharpParser\";\nimport { OpenDirectiveContext } from \"./QSharpParser\";\nimport { AttributeContext } from \"./QSharpParser\";\nimport { AccessContext } from \"./QSharpParser\";\nimport { DeclarationPrefixContext } from \"./QSharpParser\";\nimport { TypeDeclarationContext } from \"./QSharpParser\";\nimport { UnderlyingTypeContext } from \"./QSharpParser\";\nimport { TypeDeclarationTupleContext } from \"./QSharpParser\";\nimport { TypeTupleItemContext } from \"./QSharpParser\";\nimport { NamedItemContext } from \"./QSharpParser\";\nimport { CallableDeclarationContext } from \"./QSharpParser\";\nimport { TypeParameterBindingContext } from \"./QSharpParser\";\nimport { ParameterTupleContext } from \"./QSharpParser\";\nimport { ParameterContext } from \"./QSharpParser\";\nimport { CharacteristicsContext } from \"./QSharpParser\";\nimport { CharacteristicsExpressionContext } from \"./QSharpParser\";\nimport { CallableBodyContext } from \"./QSharpParser\";\nimport { SpecializationContext } from \"./QSharpParser\";\nimport { SpecializationNameContext } from \"./QSharpParser\";\nimport { SpecializationGeneratorContext } from \"./QSharpParser\";\nimport { ProvidedSpecializationContext } from \"./QSharpParser\";\nimport { SpecializationParameterTupleContext } from \"./QSharpParser\";\nimport { SpecializationParameterContext } from \"./QSharpParser\";\nimport { TypeContext } from \"./QSharpParser\";\nimport { StatementContext } from \"./QSharpParser\";\nimport { ScopeContext } from \"./QSharpParser\";\nimport { SymbolBindingContext } from \"./QSharpParser\";\nimport { UpdateOperatorContext } from \"./QSharpParser\";\nimport { ForBindingContext } from \"./QSharpParser\";\nimport { QubitBindingContext } from \"./QSharpParser\";\nimport { QubitInitializerContext } from \"./QSharpParser\";\nimport { ExpressionContext } from \"./QSharpParser\";\nimport { SizeContext } from \"./QSharpParser\";\nimport { TypeTupleContext } from \"./QSharpParser\";\nimport { BoolLiteralContext } from \"./QSharpParser\";\nimport { ResultLiteralContext } from \"./QSharpParser\";\nimport { PauliLiteralContext } from \"./QSharpParser\";\nimport { StringContentContext } from \"./QSharpParser\";\nimport { InterpStringContentContext } from \"./QSharpParser\";\n\n\n/**\n * This interface defines a complete listener for a parse tree produced by\n * `QSharpParser`.\n */\nexport interface QSharpParserListener extends ParseTreeListener {\n\t/**\n\t * Enter a parse tree produced by the `InterpStringEscapeContent`\n\t * labeled alternative in `QSharpParser.interpStringContent`.\n\t * @param ctx the parse tree\n\t */\n\tenterInterpStringEscapeContent?: (ctx: InterpStringEscapeContentContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `InterpStringEscapeContent`\n\t * labeled alternative in `QSharpParser.interpStringContent`.\n\t * @param ctx the parse tree\n\t */\n\texitInterpStringEscapeContent?: (ctx: InterpStringEscapeContentContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `InterpExpressionContent`\n\t * labeled alternative in `QSharpParser.interpStringContent`.\n\t * @param ctx the parse tree\n\t */\n\tenterInterpExpressionContent?: (ctx: InterpExpressionContentContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `InterpExpressionContent`\n\t * labeled alternative in `QSharpParser.interpStringContent`.\n\t * @param ctx the parse tree\n\t */\n\texitInterpExpressionContent?: (ctx: InterpExpressionContentContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `InterpTextContent`\n\t * labeled alternative in `QSharpParser.interpStringContent`.\n\t * @param ctx the parse tree\n\t */\n\tenterInterpTextContent?: (ctx: InterpTextContentContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `InterpTextContent`\n\t * labeled alternative in `QSharpParser.interpStringContent`.\n\t * @param ctx the parse tree\n\t */\n\texitInterpTextContent?: (ctx: InterpTextContentContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `AdjointCharacteristics`\n\t * labeled alternative in `QSharpParser.characteristicsExpression`.\n\t * @param ctx the parse tree\n\t */\n\tenterAdjointCharacteristics?: (ctx: AdjointCharacteristicsContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `AdjointCharacteristics`\n\t * labeled alternative in `QSharpParser.characteristicsExpression`.\n\t * @param ctx the parse tree\n\t */\n\texitAdjointCharacteristics?: (ctx: AdjointCharacteristicsContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `ControlledCharacteristics`\n\t * labeled alternative in `QSharpParser.characteristicsExpression`.\n\t * @param ctx the parse tree\n\t */\n\tenterControlledCharacteristics?: (ctx: ControlledCharacteristicsContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `ControlledCharacteristics`\n\t * labeled alternative in `QSharpParser.characteristicsExpression`.\n\t * @param ctx the parse tree\n\t */\n\texitControlledCharacteristics?: (ctx: ControlledCharacteristicsContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `CharacteristicGroup`\n\t * labeled alternative in `QSharpParser.characteristicsExpression`.\n\t * @param ctx the parse tree\n\t */\n\tenterCharacteristicGroup?: (ctx: CharacteristicGroupContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `CharacteristicGroup`\n\t * labeled alternative in `QSharpParser.characteristicsExpression`.\n\t * @param ctx the parse tree\n\t */\n\texitCharacteristicGroup?: (ctx: CharacteristicGroupContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `IntersectCharacteristics`\n\t * labeled alternative in `QSharpParser.characteristicsExpression`.\n\t * @param ctx the parse tree\n\t */\n\tenterIntersectCharacteristics?: (ctx: IntersectCharacteristicsContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `IntersectCharacteristics`\n\t * labeled alternative in `QSharpParser.characteristicsExpression`.\n\t * @param ctx the parse tree\n\t */\n\texitIntersectCharacteristics?: (ctx: IntersectCharacteristicsContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `UnionCharacteristics`\n\t * labeled alternative in `QSharpParser.characteristicsExpression`.\n\t * @param ctx the parse tree\n\t */\n\tenterUnionCharacteristics?: (ctx: UnionCharacteristicsContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `UnionCharacteristics`\n\t * labeled alternative in `QSharpParser.characteristicsExpression`.\n\t * @param ctx the parse tree\n\t */\n\texitUnionCharacteristics?: (ctx: UnionCharacteristicsContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `MissingType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\tenterMissingType?: (ctx: MissingTypeContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `MissingType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\texitMissingType?: (ctx: MissingTypeContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `TupleType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\tenterTupleType?: (ctx: TupleTypeContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `TupleType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\texitTupleType?: (ctx: TupleTypeContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `TypeParameter`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\tenterTypeParameter?: (ctx: TypeParameterContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `TypeParameter`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\texitTypeParameter?: (ctx: TypeParameterContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `ArrayType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\tenterArrayType?: (ctx: ArrayTypeContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `ArrayType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\texitArrayType?: (ctx: ArrayTypeContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `CallableType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\tenterCallableType?: (ctx: CallableTypeContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `CallableType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\texitCallableType?: (ctx: CallableTypeContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `BigIntType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\tenterBigIntType?: (ctx: BigIntTypeContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `BigIntType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\texitBigIntType?: (ctx: BigIntTypeContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `BoolType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\tenterBoolType?: (ctx: BoolTypeContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `BoolType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\texitBoolType?: (ctx: BoolTypeContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `DoubleType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\tenterDoubleType?: (ctx: DoubleTypeContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `DoubleType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\texitDoubleType?: (ctx: DoubleTypeContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `IntType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\tenterIntType?: (ctx: IntTypeContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `IntType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\texitIntType?: (ctx: IntTypeContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `PauliType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\tenterPauliType?: (ctx: PauliTypeContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `PauliType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\texitPauliType?: (ctx: PauliTypeContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `QubitType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\tenterQubitType?: (ctx: QubitTypeContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `QubitType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\texitQubitType?: (ctx: QubitTypeContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `RangeType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\tenterRangeType?: (ctx: RangeTypeContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `RangeType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\texitRangeType?: (ctx: RangeTypeContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `ResultType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\tenterResultType?: (ctx: ResultTypeContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `ResultType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\texitResultType?: (ctx: ResultTypeContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `StringType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\tenterStringType?: (ctx: StringTypeContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `StringType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\texitStringType?: (ctx: StringTypeContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `UnitType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\tenterUnitType?: (ctx: UnitTypeContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `UnitType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\texitUnitType?: (ctx: UnitTypeContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `UserDefinedType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\tenterUserDefinedType?: (ctx: UserDefinedTypeContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `UserDefinedType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\texitUserDefinedType?: (ctx: UserDefinedTypeContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `DiscardSymbol`\n\t * labeled alternative in `QSharpParser.symbolBinding`.\n\t * @param ctx the parse tree\n\t */\n\tenterDiscardSymbol?: (ctx: DiscardSymbolContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `DiscardSymbol`\n\t * labeled alternative in `QSharpParser.symbolBinding`.\n\t * @param ctx the parse tree\n\t */\n\texitDiscardSymbol?: (ctx: DiscardSymbolContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `SymbolName`\n\t * labeled alternative in `QSharpParser.symbolBinding`.\n\t * @param ctx the parse tree\n\t */\n\tenterSymbolName?: (ctx: SymbolNameContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `SymbolName`\n\t * labeled alternative in `QSharpParser.symbolBinding`.\n\t * @param ctx the parse tree\n\t */\n\texitSymbolName?: (ctx: SymbolNameContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `SymbolTuple`\n\t * labeled alternative in `QSharpParser.symbolBinding`.\n\t * @param ctx the parse tree\n\t */\n\tenterSymbolTuple?: (ctx: SymbolTupleContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `SymbolTuple`\n\t * labeled alternative in `QSharpParser.symbolBinding`.\n\t * @param ctx the parse tree\n\t */\n\texitSymbolTuple?: (ctx: SymbolTupleContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `NamedTypeItem`\n\t * labeled alternative in `QSharpParser.typeTupleItem`.\n\t * @param ctx the parse tree\n\t */\n\tenterNamedTypeItem?: (ctx: NamedTypeItemContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `NamedTypeItem`\n\t * labeled alternative in `QSharpParser.typeTupleItem`.\n\t * @param ctx the parse tree\n\t */\n\texitNamedTypeItem?: (ctx: NamedTypeItemContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `UnderlyingTypeItem`\n\t * labeled alternative in `QSharpParser.typeTupleItem`.\n\t * @param ctx the parse tree\n\t */\n\tenterUnderlyingTypeItem?: (ctx: UnderlyingTypeItemContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `UnderlyingTypeItem`\n\t * labeled alternative in `QSharpParser.typeTupleItem`.\n\t * @param ctx the parse tree\n\t */\n\texitUnderlyingTypeItem?: (ctx: UnderlyingTypeItemContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `NamedParameter`\n\t * labeled alternative in `QSharpParser.parameter`.\n\t * @param ctx the parse tree\n\t */\n\tenterNamedParameter?: (ctx: NamedParameterContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `NamedParameter`\n\t * labeled alternative in `QSharpParser.parameter`.\n\t * @param ctx the parse tree\n\t */\n\texitNamedParameter?: (ctx: NamedParameterContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `TupledParameter`\n\t * labeled alternative in `QSharpParser.parameter`.\n\t * @param ctx the parse tree\n\t */\n\tenterTupledParameter?: (ctx: TupledParameterContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `TupledParameter`\n\t * labeled alternative in `QSharpParser.parameter`.\n\t * @param ctx the parse tree\n\t */\n\texitTupledParameter?: (ctx: TupledParameterContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `ExpressionStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\tenterExpressionStatement?: (ctx: ExpressionStatementContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `ExpressionStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\texitExpressionStatement?: (ctx: ExpressionStatementContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `ReturnStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\tenterReturnStatement?: (ctx: ReturnStatementContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `ReturnStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\texitReturnStatement?: (ctx: ReturnStatementContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `FailStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\tenterFailStatement?: (ctx: FailStatementContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `FailStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\texitFailStatement?: (ctx: FailStatementContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `LetStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\tenterLetStatement?: (ctx: LetStatementContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `LetStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\texitLetStatement?: (ctx: LetStatementContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `MutableStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\tenterMutableStatement?: (ctx: MutableStatementContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `MutableStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\texitMutableStatement?: (ctx: MutableStatementContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `SetStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\tenterSetStatement?: (ctx: SetStatementContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `SetStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\texitSetStatement?: (ctx: SetStatementContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `UpdateStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\tenterUpdateStatement?: (ctx: UpdateStatementContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `UpdateStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\texitUpdateStatement?: (ctx: UpdateStatementContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `UpdateWithStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\tenterUpdateWithStatement?: (ctx: UpdateWithStatementContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `UpdateWithStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\texitUpdateWithStatement?: (ctx: UpdateWithStatementContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `IfStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\tenterIfStatement?: (ctx: IfStatementContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `IfStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\texitIfStatement?: (ctx: IfStatementContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `ElifStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\tenterElifStatement?: (ctx: ElifStatementContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `ElifStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\texitElifStatement?: (ctx: ElifStatementContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `ElseStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\tenterElseStatement?: (ctx: ElseStatementContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `ElseStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\texitElseStatement?: (ctx: ElseStatementContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `ForStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\tenterForStatement?: (ctx: ForStatementContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `ForStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\texitForStatement?: (ctx: ForStatementContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `WhileStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\tenterWhileStatement?: (ctx: WhileStatementContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `WhileStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\texitWhileStatement?: (ctx: WhileStatementContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `RepeatStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\tenterRepeatStatement?: (ctx: RepeatStatementContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `RepeatStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\texitRepeatStatement?: (ctx: RepeatStatementContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `UntilStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\tenterUntilStatement?: (ctx: UntilStatementContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `UntilStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\texitUntilStatement?: (ctx: UntilStatementContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `WithinStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\tenterWithinStatement?: (ctx: WithinStatementContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `WithinStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\texitWithinStatement?: (ctx: WithinStatementContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `ApplyStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\tenterApplyStatement?: (ctx: ApplyStatementContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `ApplyStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\texitApplyStatement?: (ctx: ApplyStatementContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `QubitDeclaration`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\tenterQubitDeclaration?: (ctx: QubitDeclarationContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `QubitDeclaration`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\texitQubitDeclaration?: (ctx: QubitDeclarationContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `CallableStatements`\n\t * labeled alternative in `QSharpParser.callableBody`.\n\t * @param ctx the parse tree\n\t */\n\tenterCallableStatements?: (ctx: CallableStatementsContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `CallableStatements`\n\t * labeled alternative in `QSharpParser.callableBody`.\n\t * @param ctx the parse tree\n\t */\n\texitCallableStatements?: (ctx: CallableStatementsContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `CallableSpecializations`\n\t * labeled alternative in `QSharpParser.callableBody`.\n\t * @param ctx the parse tree\n\t */\n\tenterCallableSpecializations?: (ctx: CallableSpecializationsContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `CallableSpecializations`\n\t * labeled alternative in `QSharpParser.callableBody`.\n\t * @param ctx the parse tree\n\t */\n\texitCallableSpecializations?: (ctx: CallableSpecializationsContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `MissingExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterMissingExpression?: (ctx: MissingExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `MissingExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitMissingExpression?: (ctx: MissingExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `IdentifierExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterIdentifierExpression?: (ctx: IdentifierExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `IdentifierExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitIdentifierExpression?: (ctx: IdentifierExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `IntegerExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterIntegerExpression?: (ctx: IntegerExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `IntegerExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitIntegerExpression?: (ctx: IntegerExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `BigIntegerExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterBigIntegerExpression?: (ctx: BigIntegerExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `BigIntegerExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitBigIntegerExpression?: (ctx: BigIntegerExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `DoubleExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterDoubleExpression?: (ctx: DoubleExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `DoubleExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitDoubleExpression?: (ctx: DoubleExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `StringExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterStringExpression?: (ctx: StringExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `StringExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitStringExpression?: (ctx: StringExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `InterpStringExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterInterpStringExpression?: (ctx: InterpStringExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `InterpStringExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitInterpStringExpression?: (ctx: InterpStringExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `BoolExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterBoolExpression?: (ctx: BoolExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `BoolExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitBoolExpression?: (ctx: BoolExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `ResultExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterResultExpression?: (ctx: ResultExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `ResultExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitResultExpression?: (ctx: ResultExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `PauliExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterPauliExpression?: (ctx: PauliExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `PauliExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitPauliExpression?: (ctx: PauliExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `TupleExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterTupleExpression?: (ctx: TupleExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `TupleExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitTupleExpression?: (ctx: TupleExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `ArrayExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterArrayExpression?: (ctx: ArrayExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `ArrayExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitArrayExpression?: (ctx: ArrayExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `SizedArrayExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterSizedArrayExpression?: (ctx: SizedArrayExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `SizedArrayExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitSizedArrayExpression?: (ctx: SizedArrayExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `NewArrayExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterNewArrayExpression?: (ctx: NewArrayExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `NewArrayExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitNewArrayExpression?: (ctx: NewArrayExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `NamedItemAccessExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterNamedItemAccessExpression?: (ctx: NamedItemAccessExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `NamedItemAccessExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitNamedItemAccessExpression?: (ctx: NamedItemAccessExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `ArrayAccessExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterArrayAccessExpression?: (ctx: ArrayAccessExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `ArrayAccessExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitArrayAccessExpression?: (ctx: ArrayAccessExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `UnwrapExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterUnwrapExpression?: (ctx: UnwrapExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `UnwrapExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitUnwrapExpression?: (ctx: UnwrapExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `ControlledExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterControlledExpression?: (ctx: ControlledExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `ControlledExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitControlledExpression?: (ctx: ControlledExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `AdjointExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterAdjointExpression?: (ctx: AdjointExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `AdjointExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitAdjointExpression?: (ctx: AdjointExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `CallExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterCallExpression?: (ctx: CallExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `CallExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitCallExpression?: (ctx: CallExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `PrefixOpExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterPrefixOpExpression?: (ctx: PrefixOpExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `PrefixOpExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitPrefixOpExpression?: (ctx: PrefixOpExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `ExponentExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterExponentExpression?: (ctx: ExponentExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `ExponentExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitExponentExpression?: (ctx: ExponentExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `MultiplyExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterMultiplyExpression?: (ctx: MultiplyExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `MultiplyExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitMultiplyExpression?: (ctx: MultiplyExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `AddExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterAddExpression?: (ctx: AddExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `AddExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitAddExpression?: (ctx: AddExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `ShiftExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterShiftExpression?: (ctx: ShiftExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `ShiftExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitShiftExpression?: (ctx: ShiftExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `CompareExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterCompareExpression?: (ctx: CompareExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `CompareExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitCompareExpression?: (ctx: CompareExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `EqualsExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterEqualsExpression?: (ctx: EqualsExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `EqualsExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitEqualsExpression?: (ctx: EqualsExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `BitwiseAndExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterBitwiseAndExpression?: (ctx: BitwiseAndExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `BitwiseAndExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitBitwiseAndExpression?: (ctx: BitwiseAndExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `BitwiseXorExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterBitwiseXorExpression?: (ctx: BitwiseXorExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `BitwiseXorExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitBitwiseXorExpression?: (ctx: BitwiseXorExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `BitwiseOrExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterBitwiseOrExpression?: (ctx: BitwiseOrExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `BitwiseOrExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitBitwiseOrExpression?: (ctx: BitwiseOrExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `AndExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterAndExpression?: (ctx: AndExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `AndExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitAndExpression?: (ctx: AndExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `OrExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterOrExpression?: (ctx: OrExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `OrExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitOrExpression?: (ctx: OrExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `ConditionalExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterConditionalExpression?: (ctx: ConditionalExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `ConditionalExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitConditionalExpression?: (ctx: ConditionalExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `RangeExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterRangeExpression?: (ctx: RangeExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `RangeExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitRangeExpression?: (ctx: RangeExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `RightOpenRangeExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterRightOpenRangeExpression?: (ctx: RightOpenRangeExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `RightOpenRangeExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitRightOpenRangeExpression?: (ctx: RightOpenRangeExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `LeftOpenRangeExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterLeftOpenRangeExpression?: (ctx: LeftOpenRangeExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `LeftOpenRangeExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitLeftOpenRangeExpression?: (ctx: LeftOpenRangeExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `OpenRangeExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterOpenRangeExpression?: (ctx: OpenRangeExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `OpenRangeExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitOpenRangeExpression?: (ctx: OpenRangeExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `UpdateExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterUpdateExpression?: (ctx: UpdateExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `UpdateExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitUpdateExpression?: (ctx: UpdateExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `LambdaExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterLambdaExpression?: (ctx: LambdaExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `LambdaExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitLambdaExpression?: (ctx: LambdaExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `OpenElement`\n\t * labeled alternative in `QSharpParser.namespaceElement`.\n\t * @param ctx the parse tree\n\t */\n\tenterOpenElement?: (ctx: OpenElementContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `OpenElement`\n\t * labeled alternative in `QSharpParser.namespaceElement`.\n\t * @param ctx the parse tree\n\t */\n\texitOpenElement?: (ctx: OpenElementContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `TypeElement`\n\t * labeled alternative in `QSharpParser.namespaceElement`.\n\t * @param ctx the parse tree\n\t */\n\tenterTypeElement?: (ctx: TypeElementContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `TypeElement`\n\t * labeled alternative in `QSharpParser.namespaceElement`.\n\t * @param ctx the parse tree\n\t */\n\texitTypeElement?: (ctx: TypeElementContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `CallableElement`\n\t * labeled alternative in `QSharpParser.namespaceElement`.\n\t * @param ctx the parse tree\n\t */\n\tenterCallableElement?: (ctx: CallableElementContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `CallableElement`\n\t * labeled alternative in `QSharpParser.namespaceElement`.\n\t * @param ctx the parse tree\n\t */\n\texitCallableElement?: (ctx: CallableElementContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `AutoGenerator`\n\t * labeled alternative in `QSharpParser.specializationGenerator`.\n\t * @param ctx the parse tree\n\t */\n\tenterAutoGenerator?: (ctx: AutoGeneratorContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `AutoGenerator`\n\t * labeled alternative in `QSharpParser.specializationGenerator`.\n\t * @param ctx the parse tree\n\t */\n\texitAutoGenerator?: (ctx: AutoGeneratorContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `SelfGenerator`\n\t * labeled alternative in `QSharpParser.specializationGenerator`.\n\t * @param ctx the parse tree\n\t */\n\tenterSelfGenerator?: (ctx: SelfGeneratorContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `SelfGenerator`\n\t * labeled alternative in `QSharpParser.specializationGenerator`.\n\t * @param ctx the parse tree\n\t */\n\texitSelfGenerator?: (ctx: SelfGeneratorContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `InvertGenerator`\n\t * labeled alternative in `QSharpParser.specializationGenerator`.\n\t * @param ctx the parse tree\n\t */\n\tenterInvertGenerator?: (ctx: InvertGeneratorContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `InvertGenerator`\n\t * labeled alternative in `QSharpParser.specializationGenerator`.\n\t * @param ctx the parse tree\n\t */\n\texitInvertGenerator?: (ctx: InvertGeneratorContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `DistributeGenerator`\n\t * labeled alternative in `QSharpParser.specializationGenerator`.\n\t * @param ctx the parse tree\n\t */\n\tenterDistributeGenerator?: (ctx: DistributeGeneratorContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `DistributeGenerator`\n\t * labeled alternative in `QSharpParser.specializationGenerator`.\n\t * @param ctx the parse tree\n\t */\n\texitDistributeGenerator?: (ctx: DistributeGeneratorContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `IntrinsicGenerator`\n\t * labeled alternative in `QSharpParser.specializationGenerator`.\n\t * @param ctx the parse tree\n\t */\n\tenterIntrinsicGenerator?: (ctx: IntrinsicGeneratorContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `IntrinsicGenerator`\n\t * labeled alternative in `QSharpParser.specializationGenerator`.\n\t * @param ctx the parse tree\n\t */\n\texitIntrinsicGenerator?: (ctx: IntrinsicGeneratorContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `ProvidedGenerator`\n\t * labeled alternative in `QSharpParser.specializationGenerator`.\n\t * @param ctx the parse tree\n\t */\n\tenterProvidedGenerator?: (ctx: ProvidedGeneratorContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `ProvidedGenerator`\n\t * labeled alternative in `QSharpParser.specializationGenerator`.\n\t * @param ctx the parse tree\n\t */\n\texitProvidedGenerator?: (ctx: ProvidedGeneratorContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `TupleUnderlyingType`\n\t * labeled alternative in `QSharpParser.underlyingType`.\n\t * @param ctx the parse tree\n\t */\n\tenterTupleUnderlyingType?: (ctx: TupleUnderlyingTypeContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `TupleUnderlyingType`\n\t * labeled alternative in `QSharpParser.underlyingType`.\n\t * @param ctx the parse tree\n\t */\n\texitTupleUnderlyingType?: (ctx: TupleUnderlyingTypeContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `UnnamedTypeItem`\n\t * labeled alternative in `QSharpParser.underlyingType`.\n\t * @param ctx the parse tree\n\t */\n\tenterUnnamedTypeItem?: (ctx: UnnamedTypeItemContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `UnnamedTypeItem`\n\t * labeled alternative in `QSharpParser.underlyingType`.\n\t * @param ctx the parse tree\n\t */\n\texitUnnamedTypeItem?: (ctx: UnnamedTypeItemContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `SingleQubit`\n\t * labeled alternative in `QSharpParser.qubitInitializer`.\n\t * @param ctx the parse tree\n\t */\n\tenterSingleQubit?: (ctx: SingleQubitContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `SingleQubit`\n\t * labeled alternative in `QSharpParser.qubitInitializer`.\n\t * @param ctx the parse tree\n\t */\n\texitSingleQubit?: (ctx: SingleQubitContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `QubitArray`\n\t * labeled alternative in `QSharpParser.qubitInitializer`.\n\t * @param ctx the parse tree\n\t */\n\tenterQubitArray?: (ctx: QubitArrayContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `QubitArray`\n\t * labeled alternative in `QSharpParser.qubitInitializer`.\n\t * @param ctx the parse tree\n\t */\n\texitQubitArray?: (ctx: QubitArrayContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by the `QubitTuple`\n\t * labeled alternative in `QSharpParser.qubitInitializer`.\n\t * @param ctx the parse tree\n\t */\n\tenterQubitTuple?: (ctx: QubitTupleContext) => void;\n\t/**\n\t * Exit a parse tree produced by the `QubitTuple`\n\t * labeled alternative in `QSharpParser.qubitInitializer`.\n\t * @param ctx the parse tree\n\t */\n\texitQubitTuple?: (ctx: QubitTupleContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.document`.\n\t * @param ctx the parse tree\n\t */\n\tenterDocument?: (ctx: DocumentContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.document`.\n\t * @param ctx the parse tree\n\t */\n\texitDocument?: (ctx: DocumentContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.namespace`.\n\t * @param ctx the parse tree\n\t */\n\tenterNamespace?: (ctx: NamespaceContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.namespace`.\n\t * @param ctx the parse tree\n\t */\n\texitNamespace?: (ctx: NamespaceContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.qualifiedName`.\n\t * @param ctx the parse tree\n\t */\n\tenterQualifiedName?: (ctx: QualifiedNameContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.qualifiedName`.\n\t * @param ctx the parse tree\n\t */\n\texitQualifiedName?: (ctx: QualifiedNameContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.namespaceElement`.\n\t * @param ctx the parse tree\n\t */\n\tenterNamespaceElement?: (ctx: NamespaceElementContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.namespaceElement`.\n\t * @param ctx the parse tree\n\t */\n\texitNamespaceElement?: (ctx: NamespaceElementContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.openDirective`.\n\t * @param ctx the parse tree\n\t */\n\tenterOpenDirective?: (ctx: OpenDirectiveContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.openDirective`.\n\t * @param ctx the parse tree\n\t */\n\texitOpenDirective?: (ctx: OpenDirectiveContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.attribute`.\n\t * @param ctx the parse tree\n\t */\n\tenterAttribute?: (ctx: AttributeContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.attribute`.\n\t * @param ctx the parse tree\n\t */\n\texitAttribute?: (ctx: AttributeContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.access`.\n\t * @param ctx the parse tree\n\t */\n\tenterAccess?: (ctx: AccessContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.access`.\n\t * @param ctx the parse tree\n\t */\n\texitAccess?: (ctx: AccessContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.declarationPrefix`.\n\t * @param ctx the parse tree\n\t */\n\tenterDeclarationPrefix?: (ctx: DeclarationPrefixContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.declarationPrefix`.\n\t * @param ctx the parse tree\n\t */\n\texitDeclarationPrefix?: (ctx: DeclarationPrefixContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.typeDeclaration`.\n\t * @param ctx the parse tree\n\t */\n\tenterTypeDeclaration?: (ctx: TypeDeclarationContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.typeDeclaration`.\n\t * @param ctx the parse tree\n\t */\n\texitTypeDeclaration?: (ctx: TypeDeclarationContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.underlyingType`.\n\t * @param ctx the parse tree\n\t */\n\tenterUnderlyingType?: (ctx: UnderlyingTypeContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.underlyingType`.\n\t * @param ctx the parse tree\n\t */\n\texitUnderlyingType?: (ctx: UnderlyingTypeContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.typeDeclarationTuple`.\n\t * @param ctx the parse tree\n\t */\n\tenterTypeDeclarationTuple?: (ctx: TypeDeclarationTupleContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.typeDeclarationTuple`.\n\t * @param ctx the parse tree\n\t */\n\texitTypeDeclarationTuple?: (ctx: TypeDeclarationTupleContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.typeTupleItem`.\n\t * @param ctx the parse tree\n\t */\n\tenterTypeTupleItem?: (ctx: TypeTupleItemContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.typeTupleItem`.\n\t * @param ctx the parse tree\n\t */\n\texitTypeTupleItem?: (ctx: TypeTupleItemContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.namedItem`.\n\t * @param ctx the parse tree\n\t */\n\tenterNamedItem?: (ctx: NamedItemContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.namedItem`.\n\t * @param ctx the parse tree\n\t */\n\texitNamedItem?: (ctx: NamedItemContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.callableDeclaration`.\n\t * @param ctx the parse tree\n\t */\n\tenterCallableDeclaration?: (ctx: CallableDeclarationContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.callableDeclaration`.\n\t * @param ctx the parse tree\n\t */\n\texitCallableDeclaration?: (ctx: CallableDeclarationContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.typeParameterBinding`.\n\t * @param ctx the parse tree\n\t */\n\tenterTypeParameterBinding?: (ctx: TypeParameterBindingContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.typeParameterBinding`.\n\t * @param ctx the parse tree\n\t */\n\texitTypeParameterBinding?: (ctx: TypeParameterBindingContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.parameterTuple`.\n\t * @param ctx the parse tree\n\t */\n\tenterParameterTuple?: (ctx: ParameterTupleContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.parameterTuple`.\n\t * @param ctx the parse tree\n\t */\n\texitParameterTuple?: (ctx: ParameterTupleContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.parameter`.\n\t * @param ctx the parse tree\n\t */\n\tenterParameter?: (ctx: ParameterContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.parameter`.\n\t * @param ctx the parse tree\n\t */\n\texitParameter?: (ctx: ParameterContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.characteristics`.\n\t * @param ctx the parse tree\n\t */\n\tenterCharacteristics?: (ctx: CharacteristicsContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.characteristics`.\n\t * @param ctx the parse tree\n\t */\n\texitCharacteristics?: (ctx: CharacteristicsContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.characteristicsExpression`.\n\t * @param ctx the parse tree\n\t */\n\tenterCharacteristicsExpression?: (ctx: CharacteristicsExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.characteristicsExpression`.\n\t * @param ctx the parse tree\n\t */\n\texitCharacteristicsExpression?: (ctx: CharacteristicsExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.callableBody`.\n\t * @param ctx the parse tree\n\t */\n\tenterCallableBody?: (ctx: CallableBodyContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.callableBody`.\n\t * @param ctx the parse tree\n\t */\n\texitCallableBody?: (ctx: CallableBodyContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.specialization`.\n\t * @param ctx the parse tree\n\t */\n\tenterSpecialization?: (ctx: SpecializationContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.specialization`.\n\t * @param ctx the parse tree\n\t */\n\texitSpecialization?: (ctx: SpecializationContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.specializationName`.\n\t * @param ctx the parse tree\n\t */\n\tenterSpecializationName?: (ctx: SpecializationNameContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.specializationName`.\n\t * @param ctx the parse tree\n\t */\n\texitSpecializationName?: (ctx: SpecializationNameContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.specializationGenerator`.\n\t * @param ctx the parse tree\n\t */\n\tenterSpecializationGenerator?: (ctx: SpecializationGeneratorContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.specializationGenerator`.\n\t * @param ctx the parse tree\n\t */\n\texitSpecializationGenerator?: (ctx: SpecializationGeneratorContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.providedSpecialization`.\n\t * @param ctx the parse tree\n\t */\n\tenterProvidedSpecialization?: (ctx: ProvidedSpecializationContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.providedSpecialization`.\n\t * @param ctx the parse tree\n\t */\n\texitProvidedSpecialization?: (ctx: ProvidedSpecializationContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.specializationParameterTuple`.\n\t * @param ctx the parse tree\n\t */\n\tenterSpecializationParameterTuple?: (ctx: SpecializationParameterTupleContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.specializationParameterTuple`.\n\t * @param ctx the parse tree\n\t */\n\texitSpecializationParameterTuple?: (ctx: SpecializationParameterTupleContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.specializationParameter`.\n\t * @param ctx the parse tree\n\t */\n\tenterSpecializationParameter?: (ctx: SpecializationParameterContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.specializationParameter`.\n\t * @param ctx the parse tree\n\t */\n\texitSpecializationParameter?: (ctx: SpecializationParameterContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\tenterType?: (ctx: TypeContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t */\n\texitType?: (ctx: TypeContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\tenterStatement?: (ctx: StatementContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\texitStatement?: (ctx: StatementContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.scope`.\n\t * @param ctx the parse tree\n\t */\n\tenterScope?: (ctx: ScopeContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.scope`.\n\t * @param ctx the parse tree\n\t */\n\texitScope?: (ctx: ScopeContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.symbolBinding`.\n\t * @param ctx the parse tree\n\t */\n\tenterSymbolBinding?: (ctx: SymbolBindingContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.symbolBinding`.\n\t * @param ctx the parse tree\n\t */\n\texitSymbolBinding?: (ctx: SymbolBindingContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.updateOperator`.\n\t * @param ctx the parse tree\n\t */\n\tenterUpdateOperator?: (ctx: UpdateOperatorContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.updateOperator`.\n\t * @param ctx the parse tree\n\t */\n\texitUpdateOperator?: (ctx: UpdateOperatorContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.forBinding`.\n\t * @param ctx the parse tree\n\t */\n\tenterForBinding?: (ctx: ForBindingContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.forBinding`.\n\t * @param ctx the parse tree\n\t */\n\texitForBinding?: (ctx: ForBindingContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.qubitBinding`.\n\t * @param ctx the parse tree\n\t */\n\tenterQubitBinding?: (ctx: QubitBindingContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.qubitBinding`.\n\t * @param ctx the parse tree\n\t */\n\texitQubitBinding?: (ctx: QubitBindingContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.qubitInitializer`.\n\t * @param ctx the parse tree\n\t */\n\tenterQubitInitializer?: (ctx: QubitInitializerContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.qubitInitializer`.\n\t * @param ctx the parse tree\n\t */\n\texitQubitInitializer?: (ctx: QubitInitializerContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterExpression?: (ctx: ExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitExpression?: (ctx: ExpressionContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.size`.\n\t * @param ctx the parse tree\n\t */\n\tenterSize?: (ctx: SizeContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.size`.\n\t * @param ctx the parse tree\n\t */\n\texitSize?: (ctx: SizeContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.typeTuple`.\n\t * @param ctx the parse tree\n\t */\n\tenterTypeTuple?: (ctx: TypeTupleContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.typeTuple`.\n\t * @param ctx the parse tree\n\t */\n\texitTypeTuple?: (ctx: TypeTupleContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.boolLiteral`.\n\t * @param ctx the parse tree\n\t */\n\tenterBoolLiteral?: (ctx: BoolLiteralContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.boolLiteral`.\n\t * @param ctx the parse tree\n\t */\n\texitBoolLiteral?: (ctx: BoolLiteralContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.resultLiteral`.\n\t * @param ctx the parse tree\n\t */\n\tenterResultLiteral?: (ctx: ResultLiteralContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.resultLiteral`.\n\t * @param ctx the parse tree\n\t */\n\texitResultLiteral?: (ctx: ResultLiteralContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.pauliLiteral`.\n\t * @param ctx the parse tree\n\t */\n\tenterPauliLiteral?: (ctx: PauliLiteralContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.pauliLiteral`.\n\t * @param ctx the parse tree\n\t */\n\texitPauliLiteral?: (ctx: PauliLiteralContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.stringContent`.\n\t * @param ctx the parse tree\n\t */\n\tenterStringContent?: (ctx: StringContentContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.stringContent`.\n\t * @param ctx the parse tree\n\t */\n\texitStringContent?: (ctx: StringContentContext) => void;\n\n\t/**\n\t * Enter a parse tree produced by `QSharpParser.interpStringContent`.\n\t * @param ctx the parse tree\n\t */\n\tenterInterpStringContent?: (ctx: InterpStringContentContext) => void;\n\t/**\n\t * Exit a parse tree produced by `QSharpParser.interpStringContent`.\n\t * @param ctx the parse tree\n\t */\n\texitInterpStringContent?: (ctx: InterpStringContentContext) => void;\n}\n\n"],
  "mappings": ";;AAAA;",
  "names": []
}
