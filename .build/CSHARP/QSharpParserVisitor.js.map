{
  "version": 3,
  "sources": ["../../CSHARP/QSharpParserVisitor.ts"],
  "sourcesContent": ["// Generated from ./CSHARP/QSharpParser.g4 by ANTLR 4.9.0-SNAPSHOT\n\n\nimport { ParseTreeVisitor } from \"antlr4ts/tree/ParseTreeVisitor\";\n\nimport { InterpStringEscapeContentContext } from \"./QSharpParser\";\nimport { InterpExpressionContentContext } from \"./QSharpParser\";\nimport { InterpTextContentContext } from \"./QSharpParser\";\nimport { AdjointCharacteristicsContext } from \"./QSharpParser\";\nimport { ControlledCharacteristicsContext } from \"./QSharpParser\";\nimport { CharacteristicGroupContext } from \"./QSharpParser\";\nimport { IntersectCharacteristicsContext } from \"./QSharpParser\";\nimport { UnionCharacteristicsContext } from \"./QSharpParser\";\nimport { MissingTypeContext } from \"./QSharpParser\";\nimport { TupleTypeContext } from \"./QSharpParser\";\nimport { TypeParameterContext } from \"./QSharpParser\";\nimport { ArrayTypeContext } from \"./QSharpParser\";\nimport { CallableTypeContext } from \"./QSharpParser\";\nimport { BigIntTypeContext } from \"./QSharpParser\";\nimport { BoolTypeContext } from \"./QSharpParser\";\nimport { DoubleTypeContext } from \"./QSharpParser\";\nimport { IntTypeContext } from \"./QSharpParser\";\nimport { PauliTypeContext } from \"./QSharpParser\";\nimport { QubitTypeContext } from \"./QSharpParser\";\nimport { RangeTypeContext } from \"./QSharpParser\";\nimport { ResultTypeContext } from \"./QSharpParser\";\nimport { StringTypeContext } from \"./QSharpParser\";\nimport { UnitTypeContext } from \"./QSharpParser\";\nimport { UserDefinedTypeContext } from \"./QSharpParser\";\nimport { DiscardSymbolContext } from \"./QSharpParser\";\nimport { SymbolNameContext } from \"./QSharpParser\";\nimport { SymbolTupleContext } from \"./QSharpParser\";\nimport { NamedTypeItemContext } from \"./QSharpParser\";\nimport { UnderlyingTypeItemContext } from \"./QSharpParser\";\nimport { NamedParameterContext } from \"./QSharpParser\";\nimport { TupledParameterContext } from \"./QSharpParser\";\nimport { ExpressionStatementContext } from \"./QSharpParser\";\nimport { ReturnStatementContext } from \"./QSharpParser\";\nimport { FailStatementContext } from \"./QSharpParser\";\nimport { LetStatementContext } from \"./QSharpParser\";\nimport { MutableStatementContext } from \"./QSharpParser\";\nimport { SetStatementContext } from \"./QSharpParser\";\nimport { UpdateStatementContext } from \"./QSharpParser\";\nimport { UpdateWithStatementContext } from \"./QSharpParser\";\nimport { IfStatementContext } from \"./QSharpParser\";\nimport { ElifStatementContext } from \"./QSharpParser\";\nimport { ElseStatementContext } from \"./QSharpParser\";\nimport { ForStatementContext } from \"./QSharpParser\";\nimport { WhileStatementContext } from \"./QSharpParser\";\nimport { RepeatStatementContext } from \"./QSharpParser\";\nimport { UntilStatementContext } from \"./QSharpParser\";\nimport { WithinStatementContext } from \"./QSharpParser\";\nimport { ApplyStatementContext } from \"./QSharpParser\";\nimport { QubitDeclarationContext } from \"./QSharpParser\";\nimport { CallableStatementsContext } from \"./QSharpParser\";\nimport { CallableSpecializationsContext } from \"./QSharpParser\";\nimport { MissingExpressionContext } from \"./QSharpParser\";\nimport { IdentifierExpressionContext } from \"./QSharpParser\";\nimport { IntegerExpressionContext } from \"./QSharpParser\";\nimport { BigIntegerExpressionContext } from \"./QSharpParser\";\nimport { DoubleExpressionContext } from \"./QSharpParser\";\nimport { StringExpressionContext } from \"./QSharpParser\";\nimport { InterpStringExpressionContext } from \"./QSharpParser\";\nimport { BoolExpressionContext } from \"./QSharpParser\";\nimport { ResultExpressionContext } from \"./QSharpParser\";\nimport { PauliExpressionContext } from \"./QSharpParser\";\nimport { TupleExpressionContext } from \"./QSharpParser\";\nimport { ArrayExpressionContext } from \"./QSharpParser\";\nimport { SizedArrayExpressionContext } from \"./QSharpParser\";\nimport { NewArrayExpressionContext } from \"./QSharpParser\";\nimport { NamedItemAccessExpressionContext } from \"./QSharpParser\";\nimport { ArrayAccessExpressionContext } from \"./QSharpParser\";\nimport { UnwrapExpressionContext } from \"./QSharpParser\";\nimport { ControlledExpressionContext } from \"./QSharpParser\";\nimport { AdjointExpressionContext } from \"./QSharpParser\";\nimport { CallExpressionContext } from \"./QSharpParser\";\nimport { PrefixOpExpressionContext } from \"./QSharpParser\";\nimport { ExponentExpressionContext } from \"./QSharpParser\";\nimport { MultiplyExpressionContext } from \"./QSharpParser\";\nimport { AddExpressionContext } from \"./QSharpParser\";\nimport { ShiftExpressionContext } from \"./QSharpParser\";\nimport { CompareExpressionContext } from \"./QSharpParser\";\nimport { EqualsExpressionContext } from \"./QSharpParser\";\nimport { BitwiseAndExpressionContext } from \"./QSharpParser\";\nimport { BitwiseXorExpressionContext } from \"./QSharpParser\";\nimport { BitwiseOrExpressionContext } from \"./QSharpParser\";\nimport { AndExpressionContext } from \"./QSharpParser\";\nimport { OrExpressionContext } from \"./QSharpParser\";\nimport { ConditionalExpressionContext } from \"./QSharpParser\";\nimport { RangeExpressionContext } from \"./QSharpParser\";\nimport { RightOpenRangeExpressionContext } from \"./QSharpParser\";\nimport { LeftOpenRangeExpressionContext } from \"./QSharpParser\";\nimport { OpenRangeExpressionContext } from \"./QSharpParser\";\nimport { UpdateExpressionContext } from \"./QSharpParser\";\nimport { LambdaExpressionContext } from \"./QSharpParser\";\nimport { OpenElementContext } from \"./QSharpParser\";\nimport { TypeElementContext } from \"./QSharpParser\";\nimport { CallableElementContext } from \"./QSharpParser\";\nimport { AutoGeneratorContext } from \"./QSharpParser\";\nimport { SelfGeneratorContext } from \"./QSharpParser\";\nimport { InvertGeneratorContext } from \"./QSharpParser\";\nimport { DistributeGeneratorContext } from \"./QSharpParser\";\nimport { IntrinsicGeneratorContext } from \"./QSharpParser\";\nimport { ProvidedGeneratorContext } from \"./QSharpParser\";\nimport { TupleUnderlyingTypeContext } from \"./QSharpParser\";\nimport { UnnamedTypeItemContext } from \"./QSharpParser\";\nimport { SingleQubitContext } from \"./QSharpParser\";\nimport { QubitArrayContext } from \"./QSharpParser\";\nimport { QubitTupleContext } from \"./QSharpParser\";\nimport { DocumentContext } from \"./QSharpParser\";\nimport { NamespaceContext } from \"./QSharpParser\";\nimport { QualifiedNameContext } from \"./QSharpParser\";\nimport { NamespaceElementContext } from \"./QSharpParser\";\nimport { OpenDirectiveContext } from \"./QSharpParser\";\nimport { AttributeContext } from \"./QSharpParser\";\nimport { AccessContext } from \"./QSharpParser\";\nimport { DeclarationPrefixContext } from \"./QSharpParser\";\nimport { TypeDeclarationContext } from \"./QSharpParser\";\nimport { UnderlyingTypeContext } from \"./QSharpParser\";\nimport { TypeDeclarationTupleContext } from \"./QSharpParser\";\nimport { TypeTupleItemContext } from \"./QSharpParser\";\nimport { NamedItemContext } from \"./QSharpParser\";\nimport { CallableDeclarationContext } from \"./QSharpParser\";\nimport { TypeParameterBindingContext } from \"./QSharpParser\";\nimport { ParameterTupleContext } from \"./QSharpParser\";\nimport { ParameterContext } from \"./QSharpParser\";\nimport { CharacteristicsContext } from \"./QSharpParser\";\nimport { CharacteristicsExpressionContext } from \"./QSharpParser\";\nimport { CallableBodyContext } from \"./QSharpParser\";\nimport { SpecializationContext } from \"./QSharpParser\";\nimport { SpecializationNameContext } from \"./QSharpParser\";\nimport { SpecializationGeneratorContext } from \"./QSharpParser\";\nimport { ProvidedSpecializationContext } from \"./QSharpParser\";\nimport { SpecializationParameterTupleContext } from \"./QSharpParser\";\nimport { SpecializationParameterContext } from \"./QSharpParser\";\nimport { TypeContext } from \"./QSharpParser\";\nimport { StatementContext } from \"./QSharpParser\";\nimport { ScopeContext } from \"./QSharpParser\";\nimport { SymbolBindingContext } from \"./QSharpParser\";\nimport { UpdateOperatorContext } from \"./QSharpParser\";\nimport { ForBindingContext } from \"./QSharpParser\";\nimport { QubitBindingContext } from \"./QSharpParser\";\nimport { QubitInitializerContext } from \"./QSharpParser\";\nimport { ExpressionContext } from \"./QSharpParser\";\nimport { SizeContext } from \"./QSharpParser\";\nimport { TypeTupleContext } from \"./QSharpParser\";\nimport { BoolLiteralContext } from \"./QSharpParser\";\nimport { ResultLiteralContext } from \"./QSharpParser\";\nimport { PauliLiteralContext } from \"./QSharpParser\";\nimport { StringContentContext } from \"./QSharpParser\";\nimport { InterpStringContentContext } from \"./QSharpParser\";\n\n\n/**\n * This interface defines a complete generic visitor for a parse tree produced\n * by `QSharpParser`.\n *\n * @param <Result> The return type of the visit operation. Use `void` for\n * operations with no return type.\n */\nexport interface QSharpParserVisitor<Result> extends ParseTreeVisitor<Result> {\n\t/**\n\t * Visit a parse tree produced by the `InterpStringEscapeContent`\n\t * labeled alternative in `QSharpParser.interpStringContent`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitInterpStringEscapeContent?: (ctx: InterpStringEscapeContentContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `InterpExpressionContent`\n\t * labeled alternative in `QSharpParser.interpStringContent`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitInterpExpressionContent?: (ctx: InterpExpressionContentContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `InterpTextContent`\n\t * labeled alternative in `QSharpParser.interpStringContent`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitInterpTextContent?: (ctx: InterpTextContentContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `AdjointCharacteristics`\n\t * labeled alternative in `QSharpParser.characteristicsExpression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitAdjointCharacteristics?: (ctx: AdjointCharacteristicsContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `ControlledCharacteristics`\n\t * labeled alternative in `QSharpParser.characteristicsExpression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitControlledCharacteristics?: (ctx: ControlledCharacteristicsContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `CharacteristicGroup`\n\t * labeled alternative in `QSharpParser.characteristicsExpression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitCharacteristicGroup?: (ctx: CharacteristicGroupContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `IntersectCharacteristics`\n\t * labeled alternative in `QSharpParser.characteristicsExpression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitIntersectCharacteristics?: (ctx: IntersectCharacteristicsContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `UnionCharacteristics`\n\t * labeled alternative in `QSharpParser.characteristicsExpression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitUnionCharacteristics?: (ctx: UnionCharacteristicsContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `MissingType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitMissingType?: (ctx: MissingTypeContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `TupleType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitTupleType?: (ctx: TupleTypeContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `TypeParameter`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitTypeParameter?: (ctx: TypeParameterContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `ArrayType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitArrayType?: (ctx: ArrayTypeContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `CallableType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitCallableType?: (ctx: CallableTypeContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `BigIntType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitBigIntType?: (ctx: BigIntTypeContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `BoolType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitBoolType?: (ctx: BoolTypeContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `DoubleType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitDoubleType?: (ctx: DoubleTypeContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `IntType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitIntType?: (ctx: IntTypeContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `PauliType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitPauliType?: (ctx: PauliTypeContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `QubitType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitQubitType?: (ctx: QubitTypeContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `RangeType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitRangeType?: (ctx: RangeTypeContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `ResultType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitResultType?: (ctx: ResultTypeContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `StringType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitStringType?: (ctx: StringTypeContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `UnitType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitUnitType?: (ctx: UnitTypeContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `UserDefinedType`\n\t * labeled alternative in `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitUserDefinedType?: (ctx: UserDefinedTypeContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `DiscardSymbol`\n\t * labeled alternative in `QSharpParser.symbolBinding`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitDiscardSymbol?: (ctx: DiscardSymbolContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `SymbolName`\n\t * labeled alternative in `QSharpParser.symbolBinding`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitSymbolName?: (ctx: SymbolNameContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `SymbolTuple`\n\t * labeled alternative in `QSharpParser.symbolBinding`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitSymbolTuple?: (ctx: SymbolTupleContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `NamedTypeItem`\n\t * labeled alternative in `QSharpParser.typeTupleItem`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitNamedTypeItem?: (ctx: NamedTypeItemContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `UnderlyingTypeItem`\n\t * labeled alternative in `QSharpParser.typeTupleItem`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitUnderlyingTypeItem?: (ctx: UnderlyingTypeItemContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `NamedParameter`\n\t * labeled alternative in `QSharpParser.parameter`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitNamedParameter?: (ctx: NamedParameterContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `TupledParameter`\n\t * labeled alternative in `QSharpParser.parameter`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitTupledParameter?: (ctx: TupledParameterContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `ExpressionStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitExpressionStatement?: (ctx: ExpressionStatementContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `ReturnStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitReturnStatement?: (ctx: ReturnStatementContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `FailStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitFailStatement?: (ctx: FailStatementContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `LetStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitLetStatement?: (ctx: LetStatementContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `MutableStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitMutableStatement?: (ctx: MutableStatementContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `SetStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitSetStatement?: (ctx: SetStatementContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `UpdateStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitUpdateStatement?: (ctx: UpdateStatementContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `UpdateWithStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitUpdateWithStatement?: (ctx: UpdateWithStatementContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `IfStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitIfStatement?: (ctx: IfStatementContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `ElifStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitElifStatement?: (ctx: ElifStatementContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `ElseStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitElseStatement?: (ctx: ElseStatementContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `ForStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitForStatement?: (ctx: ForStatementContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `WhileStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitWhileStatement?: (ctx: WhileStatementContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `RepeatStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitRepeatStatement?: (ctx: RepeatStatementContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `UntilStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitUntilStatement?: (ctx: UntilStatementContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `WithinStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitWithinStatement?: (ctx: WithinStatementContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `ApplyStatement`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitApplyStatement?: (ctx: ApplyStatementContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `QubitDeclaration`\n\t * labeled alternative in `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitQubitDeclaration?: (ctx: QubitDeclarationContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `CallableStatements`\n\t * labeled alternative in `QSharpParser.callableBody`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitCallableStatements?: (ctx: CallableStatementsContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `CallableSpecializations`\n\t * labeled alternative in `QSharpParser.callableBody`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitCallableSpecializations?: (ctx: CallableSpecializationsContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `MissingExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitMissingExpression?: (ctx: MissingExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `IdentifierExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitIdentifierExpression?: (ctx: IdentifierExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `IntegerExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitIntegerExpression?: (ctx: IntegerExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `BigIntegerExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitBigIntegerExpression?: (ctx: BigIntegerExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `DoubleExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitDoubleExpression?: (ctx: DoubleExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `StringExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitStringExpression?: (ctx: StringExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `InterpStringExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitInterpStringExpression?: (ctx: InterpStringExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `BoolExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitBoolExpression?: (ctx: BoolExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `ResultExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitResultExpression?: (ctx: ResultExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `PauliExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitPauliExpression?: (ctx: PauliExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `TupleExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitTupleExpression?: (ctx: TupleExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `ArrayExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitArrayExpression?: (ctx: ArrayExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `SizedArrayExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitSizedArrayExpression?: (ctx: SizedArrayExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `NewArrayExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitNewArrayExpression?: (ctx: NewArrayExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `NamedItemAccessExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitNamedItemAccessExpression?: (ctx: NamedItemAccessExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `ArrayAccessExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitArrayAccessExpression?: (ctx: ArrayAccessExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `UnwrapExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitUnwrapExpression?: (ctx: UnwrapExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `ControlledExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitControlledExpression?: (ctx: ControlledExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `AdjointExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitAdjointExpression?: (ctx: AdjointExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `CallExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitCallExpression?: (ctx: CallExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `PrefixOpExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitPrefixOpExpression?: (ctx: PrefixOpExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `ExponentExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitExponentExpression?: (ctx: ExponentExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `MultiplyExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitMultiplyExpression?: (ctx: MultiplyExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `AddExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitAddExpression?: (ctx: AddExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `ShiftExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitShiftExpression?: (ctx: ShiftExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `CompareExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitCompareExpression?: (ctx: CompareExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `EqualsExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitEqualsExpression?: (ctx: EqualsExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `BitwiseAndExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitBitwiseAndExpression?: (ctx: BitwiseAndExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `BitwiseXorExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitBitwiseXorExpression?: (ctx: BitwiseXorExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `BitwiseOrExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitBitwiseOrExpression?: (ctx: BitwiseOrExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `AndExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitAndExpression?: (ctx: AndExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `OrExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitOrExpression?: (ctx: OrExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `ConditionalExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitConditionalExpression?: (ctx: ConditionalExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `RangeExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitRangeExpression?: (ctx: RangeExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `RightOpenRangeExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitRightOpenRangeExpression?: (ctx: RightOpenRangeExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `LeftOpenRangeExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitLeftOpenRangeExpression?: (ctx: LeftOpenRangeExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `OpenRangeExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitOpenRangeExpression?: (ctx: OpenRangeExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `UpdateExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitUpdateExpression?: (ctx: UpdateExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `LambdaExpression`\n\t * labeled alternative in `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitLambdaExpression?: (ctx: LambdaExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `OpenElement`\n\t * labeled alternative in `QSharpParser.namespaceElement`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitOpenElement?: (ctx: OpenElementContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `TypeElement`\n\t * labeled alternative in `QSharpParser.namespaceElement`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitTypeElement?: (ctx: TypeElementContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `CallableElement`\n\t * labeled alternative in `QSharpParser.namespaceElement`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitCallableElement?: (ctx: CallableElementContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `AutoGenerator`\n\t * labeled alternative in `QSharpParser.specializationGenerator`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitAutoGenerator?: (ctx: AutoGeneratorContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `SelfGenerator`\n\t * labeled alternative in `QSharpParser.specializationGenerator`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitSelfGenerator?: (ctx: SelfGeneratorContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `InvertGenerator`\n\t * labeled alternative in `QSharpParser.specializationGenerator`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitInvertGenerator?: (ctx: InvertGeneratorContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `DistributeGenerator`\n\t * labeled alternative in `QSharpParser.specializationGenerator`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitDistributeGenerator?: (ctx: DistributeGeneratorContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `IntrinsicGenerator`\n\t * labeled alternative in `QSharpParser.specializationGenerator`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitIntrinsicGenerator?: (ctx: IntrinsicGeneratorContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `ProvidedGenerator`\n\t * labeled alternative in `QSharpParser.specializationGenerator`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitProvidedGenerator?: (ctx: ProvidedGeneratorContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `TupleUnderlyingType`\n\t * labeled alternative in `QSharpParser.underlyingType`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitTupleUnderlyingType?: (ctx: TupleUnderlyingTypeContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `UnnamedTypeItem`\n\t * labeled alternative in `QSharpParser.underlyingType`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitUnnamedTypeItem?: (ctx: UnnamedTypeItemContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `SingleQubit`\n\t * labeled alternative in `QSharpParser.qubitInitializer`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitSingleQubit?: (ctx: SingleQubitContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `QubitArray`\n\t * labeled alternative in `QSharpParser.qubitInitializer`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitQubitArray?: (ctx: QubitArrayContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by the `QubitTuple`\n\t * labeled alternative in `QSharpParser.qubitInitializer`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitQubitTuple?: (ctx: QubitTupleContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.document`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitDocument?: (ctx: DocumentContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.namespace`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitNamespace?: (ctx: NamespaceContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.qualifiedName`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitQualifiedName?: (ctx: QualifiedNameContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.namespaceElement`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitNamespaceElement?: (ctx: NamespaceElementContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.openDirective`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitOpenDirective?: (ctx: OpenDirectiveContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.attribute`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitAttribute?: (ctx: AttributeContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.access`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitAccess?: (ctx: AccessContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.declarationPrefix`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitDeclarationPrefix?: (ctx: DeclarationPrefixContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.typeDeclaration`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitTypeDeclaration?: (ctx: TypeDeclarationContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.underlyingType`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitUnderlyingType?: (ctx: UnderlyingTypeContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.typeDeclarationTuple`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitTypeDeclarationTuple?: (ctx: TypeDeclarationTupleContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.typeTupleItem`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitTypeTupleItem?: (ctx: TypeTupleItemContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.namedItem`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitNamedItem?: (ctx: NamedItemContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.callableDeclaration`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitCallableDeclaration?: (ctx: CallableDeclarationContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.typeParameterBinding`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitTypeParameterBinding?: (ctx: TypeParameterBindingContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.parameterTuple`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitParameterTuple?: (ctx: ParameterTupleContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.parameter`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitParameter?: (ctx: ParameterContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.characteristics`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitCharacteristics?: (ctx: CharacteristicsContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.characteristicsExpression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitCharacteristicsExpression?: (ctx: CharacteristicsExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.callableBody`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitCallableBody?: (ctx: CallableBodyContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.specialization`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitSpecialization?: (ctx: SpecializationContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.specializationName`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitSpecializationName?: (ctx: SpecializationNameContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.specializationGenerator`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitSpecializationGenerator?: (ctx: SpecializationGeneratorContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.providedSpecialization`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitProvidedSpecialization?: (ctx: ProvidedSpecializationContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.specializationParameterTuple`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitSpecializationParameterTuple?: (ctx: SpecializationParameterTupleContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.specializationParameter`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitSpecializationParameter?: (ctx: SpecializationParameterContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.type`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitType?: (ctx: TypeContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.statement`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitStatement?: (ctx: StatementContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.scope`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitScope?: (ctx: ScopeContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.symbolBinding`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitSymbolBinding?: (ctx: SymbolBindingContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.updateOperator`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitUpdateOperator?: (ctx: UpdateOperatorContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.forBinding`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitForBinding?: (ctx: ForBindingContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.qubitBinding`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitQubitBinding?: (ctx: QubitBindingContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.qubitInitializer`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitQubitInitializer?: (ctx: QubitInitializerContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.expression`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitExpression?: (ctx: ExpressionContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.size`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitSize?: (ctx: SizeContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.typeTuple`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitTypeTuple?: (ctx: TypeTupleContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.boolLiteral`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitBoolLiteral?: (ctx: BoolLiteralContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.resultLiteral`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitResultLiteral?: (ctx: ResultLiteralContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.pauliLiteral`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitPauliLiteral?: (ctx: PauliLiteralContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.stringContent`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitStringContent?: (ctx: StringContentContext) => Result;\n\n\t/**\n\t * Visit a parse tree produced by `QSharpParser.interpStringContent`.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tvisitInterpStringContent?: (ctx: InterpStringContentContext) => Result;\n}\n\n"],
  "mappings": ";;AAAA;",
  "names": []
}
